# -*- coding: utf-8 -*-
"""DataIntegration.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AG2ggMmMz_7dH2uUtylspivmT-PdifO3
"""

import pandas as pd
import geopandas as gpd
import numpy as np
import math
import statsmodels.api as sm
import statsmodels.formula.api as smf

df = pd.read_csv('OBB_datatset.csv').drop(columns=['Unnamed: 0'])

"""Data Engineering into numeric columns"""

df['cat_num'] = df['Category'].apply(lambda x: 0 if x == 'meeting' else 1)
df['risk_num'] = df['Risk Level'].apply(lambda x: 0 if math.isnan(x) else x)
df['duration_num'] = df['Duration'].apply(lambda x: 0 if math.isnan(x) else x)

counter = 1
df['hood_num'] = df['Neighborhood']
# Numerically categorize neighborhoods in alphabetical order
for i in df['Neighborhood'].sort_values().unique():
  df['hood_num'].replace(i, counter, inplace=True)
  counter += 1

df['hood_num'] = df['hood_num'].fillna(0)

def categorize_withwho(who):
  if who == 'Social Media Monitoring':
    return 'Social Media Monitoring'
  elif who == 'School Safety work/ Safe passage':
    return 'Safe Passage'
  elif who in ['REACH Meeting', 'G.V.I. Citywide Outreach Team Meeting',
               'G.V.I. Small Team Meeting', 'G.V.I. Leadership Team Meeting',
               'ACAR/PARC', 'G.V.I. Northside Outreach Team Meeting']:
    return 'External Organization Meeting'
  elif who in ['Engaging the target population', 'Community Outreach/ Community Meeting',
               'Community Event', 'Community Meeting']:
    return 'Community Meetings and Events'
  elif who in ['Violence Prevention Activities in Zone 6', 'Prevention Activities',
               'Violence Prevention Community Event', 'Violence Prevention Activities in Zone 3',
               'Violence Prevention Activities in Zone 4', 'Violence Prevention Activities in Zone 5',
               'Violence Prevention Activities in Zone 1', 'Violence Prevention Activities in Zone 2',
               'Intervention Activities', 'Violence Prevention in Northside',
               'Violence Prevention in Homewood', 'Violence Prevention Activities in Allegheny County (outside of city limits)']:
    return 'Violence Prevention Activities'
  elif who in ['Mentoring', 'Case management', 'Reentry Services', 'Case Management Providing Reentry Services']:
    return 'Individual Interactions'
  elif who in ['Supervision/ Staff meeting', 'OBB Staff Meeting']:
    return 'Staff Meeting'
  elif isinstance(who, float):
    return 'RLA'
  else:
    return 'Other_Meet'

df['With Who'] = df['With Who'].apply(categorize_withwho)

df['With Who'].value_counts()

df[['Community Meetings and Events', 'External Organization Meeting',
   'Individual Interactions', 'Other_Meet',	'Safe Passage',
   'Social Media Monitoring', 'Staff Meeting',
   'Violence Prevention Activities']] = pd.get_dummies(df['With Who']).drop(columns=['RLA']).astype(int)

df[['Community Meeting / Town Hall Form',	'Conflict Mediation',	'G.V.I. Custom Notification',
   'Increased Outreach',	'Law Enforcement Presence',	'Other_RLA',
   'Referral for Services']] = pd.get_dummies(df['Actions']).astype(int)

# Finally, convert date to a number in months from 2021-01
df['month_num'] = pd.to_datetime(df['Date']).apply(lambda x: (x.year - 2021) * 12 + x.month)

data = df[['Neighborhood', 'month_num', 'cat_num', 'risk_num', 'duration_num', 'hood_num',
           'Community Meetings and Events', 'External Organization Meeting',
           'Individual Interactions', 'Other_Meet',	'Safe Passage',
           'Social Media Monitoring', 'Staff Meeting',
           'Violence Prevention Activities', 'Community Meeting / Town Hall Form',
           'Conflict Mediation',	'G.V.I. Custom Notification',
           'Increased Outreach',	'Law Enforcement Presence',	'Other_RLA', 'Referral for Services']]

hom = pd.read_csv('hom_neighborhood_by_month.csv')
hom = hom.loc[hom['YEAR'] > 2020]
hom = hom.rename(columns={'NAME_TABLEAU_MAP':'Neighborhood'})
data['Neighborhood'] = data['Neighborhood'].str.upper()

hom['month_num'] = hom['MONTH'] + 12 * (hom['YEAR'] - 2021)

data['homicides'] = [0]*len(data)

for index, row in pd.DataFrame(hom.groupby(['month_num', 'Neighborhood'])['VICTIM_COUNT'].sum()).iterrows():
  month = index[0]
  hood = index[1]
  hom = row['VICTIM_COUNT']
  data.loc[(data['month_num'] == month) & (data['Neighborhood'] == hood), 'homicides'] = hom

data['homicides'].value_counts()

data = data.rename(columns={'Community Meetings and Events':'comm_ev', 'External Organization Meeting':'ext_org',
       'Individual Interactions':'interaction', 'Other_Meet':'other_meet', 'Safe Passage':'safe_passage',
       'Social Media Monitoring':'sm_monitor', 'Staff Meeting':'staff',
       'Violence Prevention Activities':'violence_prev', 'Community Meeting / Town Hall Form':'community_meet',
       'Conflict Mediation':'conflict_mediation', 'G.V.I. Custom Notification':'gvi',
       'Increased Outreach':'outreach', 'Law Enforcement Presence':'law_pres', 'Other_RLA':'other_rla',
       'Referral for Services':'referral'})

numeric_data = data.drop(columns=['Neighborhood'])

test = pd.concat([pd.DataFrame(numeric_data.groupby(['hood_num', 'month_num'])['homicides'].mean()), # Mean, since they are all the same
           pd.DataFrame(numeric_data.groupby(['hood_num', 'month_num'])['cat_num'].mean()),
           pd.DataFrame(numeric_data.groupby(['hood_num', 'month_num'])['risk_num'].mean()),
           pd.DataFrame(numeric_data.groupby(['hood_num', 'month_num'])['duration_num'].mean()),
           pd.DataFrame(numeric_data.groupby(['hood_num', 'month_num'])['comm_ev'].sum()), # Sum, since they are different
           pd.DataFrame(numeric_data.groupby(['hood_num', 'month_num'])['ext_org'].sum()),
           pd.DataFrame(numeric_data.groupby(['hood_num', 'month_num'])['interaction'].sum()),
           pd.DataFrame(numeric_data.groupby(['hood_num', 'month_num'])['other_meet'].sum()),
           pd.DataFrame(numeric_data.groupby(['hood_num', 'month_num'])['safe_passage'].sum()),
           pd.DataFrame(numeric_data.groupby(['hood_num', 'month_num'])['sm_monitor'].sum()),
           pd.DataFrame(numeric_data.groupby(['hood_num', 'month_num'])['staff'].sum()),
           pd.DataFrame(numeric_data.groupby(['hood_num', 'month_num'])['violence_prev'].sum()),
           pd.DataFrame(numeric_data.groupby(['hood_num', 'month_num'])['community_meet'].sum()),
           pd.DataFrame(numeric_data.groupby(['hood_num', 'month_num'])['conflict_mediation'].sum()),
           pd.DataFrame(numeric_data.groupby(['hood_num', 'month_num'])['gvi'].sum())], axis=1).drop(
               columns=['cat_num']).rename(columns={'risk_num':'average_risk', 'duration_num':'total_meeting_mins'})

test = test.reset_index()

test.groupby('hood_num')['homicides'].sum().plot() # Plot distribution of homicides over time

"""What we have at this point: every useful piece of data (other than notes) in numeric form, readable by a model.

The current challenge: Still hard to decide what to even model from this.
"""







